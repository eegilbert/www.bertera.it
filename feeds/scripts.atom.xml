<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pietro Bertera's Blog</title><link href="http://www.bertera.it/" rel="alternate"></link><link href="http://www.bertera.it/feeds/scripts.atom.xml" rel="self"></link><id>http://www.bertera.it/</id><updated>2013-05-30T16:42:00+02:00</updated><entry><title>UAS Authenticating registrar SIPp scenario</title><link href="http://www.bertera.it/uas-authenticating-registrar-sipp-scenario.html" rel="alternate"></link><published>2013-05-30T16:42:00+02:00</published><author><name>admin</name></author><id>tag:www.bertera.it,2013-05-30:uas-authenticating-registrar-sipp-scenario.html</id><summary type="html">&lt;p&gt;&lt;a href="http://sipp.sourceforge.net"&gt;SIPp&lt;/a&gt; is a real SIP swiss army knife. You
can create various SIP scenario and test your devices and environments.&lt;/p&gt;
&lt;p&gt;I never found a SIPp scenario implementing an UAs (User Agent server)
registrar with authentication.&lt;/p&gt;
&lt;p&gt;Following you can find this scenario:&lt;/p&gt;
&lt;p&gt;The SIPp XML scenario file: &lt;strong&gt;sipp_register_auth_uas.xml&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;ISO-8859-1&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE scenario SYSTEM &amp;quot;sipp.dtd&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;scenario&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Basic UAS registrar with authentication&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;badauth&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;recv&lt;/span&gt; &lt;span class="na"&gt;request=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;send&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;![CDATA[&lt;/span&gt;

&lt;span class="cp"&gt;      SIP/2.0 401 Authorization Required&lt;/span&gt;
&lt;span class="cp"&gt;      [last_Via:]&lt;/span&gt;
&lt;span class="cp"&gt;      [last_From:]&lt;/span&gt;
&lt;span class="cp"&gt;      [last_To:];tag=[pid]SIPpTag01[call_number]&lt;/span&gt;
&lt;span class="cp"&gt;      [last_Call-ID:]&lt;/span&gt;
&lt;span class="cp"&gt;      [last_CSeq:]&lt;/span&gt;
&lt;span class="cp"&gt;      Contact: &amp;lt;sip:[local_ip]:[local_port];transport=[transport]&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;      WWW-Authenticate: Digest realm=&amp;quot;test.example.com&amp;quot;, nonce=&amp;quot;47ebe028cda119c35d4877b383027d28da013815&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;      Content-Length: [len]&lt;/span&gt;

&lt;span class="cp"&gt;    ]]&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/send&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;recv&lt;/span&gt; &lt;span class="na"&gt;request=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REGISTER&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;action&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ereg&lt;/span&gt; &lt;span class="na"&gt;regexp=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Digest .*username=\&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;([^\&amp;quot;]*)\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;search_in=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hdr&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;header=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Authorization:&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;assign_to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;junk,username&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;lookup&lt;/span&gt; &lt;span class="na"&gt;assign_to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;line&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;users.csv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[$username]&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;assign&lt;/span&gt; &lt;span class="na"&gt;assign_to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;junk&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;log&lt;/span&gt; &lt;span class="na"&gt;message=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Received REGISTER from user -[$username]-&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;log&lt;/span&gt; &lt;span class="na"&gt;message=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;searching in file at line [$line]: Username: [field0 line=\&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;[$line]\&amp;quot;]&lt;/span&gt; &lt;span class="err"&gt;Pass:&lt;/span&gt; &lt;span class="err"&gt;[field1&lt;/span&gt; &lt;span class="na"&gt;line=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;[$line]\&amp;quot;]&amp;quot;/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;verifyauth&lt;/span&gt; &lt;span class="na"&gt;assign_to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;authvalid&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;username=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[field0 line=\&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;[$line]\&amp;quot;]&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;password=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[field1 line=\&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;[$line]\&amp;quot;]&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/recv&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;nop&lt;/span&gt; &lt;span class="na"&gt;hide=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;test=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;authvalid&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;next=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;goodauth&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;nop&lt;/span&gt; &lt;span class="na"&gt;hide=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;next=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;badauth&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;goodauth&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;send&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;![CDATA[&lt;/span&gt;

&lt;span class="cp"&gt;      SIP/2.0 200 OK&lt;/span&gt;
&lt;span class="cp"&gt;      [last_Via:]&lt;/span&gt;
&lt;span class="cp"&gt;      [last_From:]&lt;/span&gt;
&lt;span class="cp"&gt;      [last_To:];tag=[call_number]&lt;/span&gt;
&lt;span class="cp"&gt;      [last_Call-ID:]&lt;/span&gt;
&lt;span class="cp"&gt;      [last_CSeq:]&lt;/span&gt;
&lt;span class="cp"&gt;      Contact: &amp;lt;sip:[local_ip]:[local_port];transport=[transport]&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;      Content-Length: 0&lt;/span&gt;
&lt;span class="cp"&gt;      Expires: 3600&lt;/span&gt;

&lt;span class="cp"&gt;    ]]&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/send&amp;gt;&lt;/span&gt;


  &lt;span class="c"&gt;&amp;lt;!-- definition of the response time repartition table (unit is ms)   --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ResponseTimeRepartition&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10, 20, 30, 40, 50, 100, 150, 200&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- definition of the call length repartition table (unit is ms)     --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;CallLengthRepartition&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10, 50, 100, 500, 1000, 5000, 10000&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/scenario&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here the users file: a CSV containing users and password (first column
is the username, second column the password). &lt;strong&gt;users.csv&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;USERS  
pippero;1234  
pippo;1234  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can run your scenario putting users.csv and
sipp_register_auth_uas.xml in the same directory, and running SIPp
inside the directory (SIPp handle in a stupid manned direcotories..):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sipp -sf sipp_register_auth_uas.xml -inf users.csv -infindex users.csv 0 -log_file sipp_register_auth_uas.log -trace_logs  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you will see an output like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;------------------------------ Scenario Screen -------- [1-9]: Change Screen --
  Port   Total-time  Total-calls  Transport
  5060       4.00 s            0  UDP

  0 new calls during 1.001 s period      1 ms scheduler resolution
  0 calls                                Peak was 0 calls, after 0 s
  0 Running, 1 Paused, 3 Woken up
  0 dead call msg (discarded)          
  3 open sockets                        

                                 Messages  Retrans   Timeout   Unexpected-Msg
  ----------&amp;gt; REGISTER           0         0         0         0        
  &amp;lt;---------- 401                0         0                            
  ----------&amp;gt; REGISTER           0         0         0         0        
  &amp;lt;---------- 200                0         0                            
------------------------------ Sipp Server Mode -------------------------------
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can register your device configuring the registrar address and
credentials, when your device will send the REGISTER request you will
the message flow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;------------------------------ Scenario Screen -------- [1-9]: Change Screen --
  Port   Total-time  Total-calls  Transport
  5060     161.28 s            1  UDP

  0 new calls during 1.001 s period      1 ms scheduler resolution
  0 calls                                Peak was 1 calls, after 157 s
  0 Running, 2 Paused, 4 Woken up
  0 dead call msg (discarded)          
  3 open sockets                        

                                 Messages  Retrans   Timeout   Unexpected-Msg
  ----------&amp;gt; REGISTER           1         0         0         0        
  &amp;lt;---------- 401                1         0                            
  ----------&amp;gt; REGISTER           1         0         0         0        
  &amp;lt;---------- 200                1         0                            
------------------------------ Sipp Server Mode -------------------------------
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Log messages will be saved in &lt;strong&gt;sipp_register_auth_uas.log&lt;/strong&gt;.&lt;br /&gt;
Please note that the &lt;strong&gt;verifyauth&lt;/strong&gt; needs the OpenSSL support.&lt;/p&gt;</summary><category term="sip"></category><category term="SIPp"></category><category term="Testing"></category><category term="VoIP"></category></entry><entry><title>bash snippet: dumping function call trace</title><link href="http://www.bertera.it/bash-snippet-dumping-function-call-trace.html" rel="alternate"></link><published>2011-07-18T12:44:00+02:00</published><author><name>admin</name></author><id>tag:www.bertera.it,2011-07-18:bash-snippet-dumping-function-call-trace.html</id><summary type="html">&lt;p&gt;Uno snippet di codice bash utile nel debugging di script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#@.. function:: __cm_exit_error([text],[...])
#@
#@   Stampa la stringa passata in stderr ed esce
#@   Se è impostata la variabile __cm_debug stampa lo stack di chiamata delle funzioni
#@
#@   :param text: la stringa da stampare
#@   :type text: String
#@
__cm_exit_error()

{
        echo &amp;quot;Error in &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;FUNCNAME&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;:&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASH_LINENO&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;: $*&amp;quot; 1&amp;gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;2
        local i=0
        [ &lt;span class="nv"&gt;$__cm_debug&lt;/span&gt; ] &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; while [ &lt;span class="nv"&gt;$i&lt;/span&gt; -lt &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="c1"&gt;#FUNCNAME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; ]; do
                [ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;FUNCNAME&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; == &amp;quot;main&amp;quot; ] &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; break
                echo &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;::&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;FUNCNAME&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;::&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASH_LINENO&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; 1&amp;gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;2
                i=$(expr &lt;span class="nv"&gt;$i&lt;/span&gt; + 1)
        done
        exit 1
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="bash"></category><category term="debugging"></category><category term="script"></category></entry><entry><title>VPN layer 3 con OpenSSH</title><link href="http://www.bertera.it/vpn-layer-3-con-openssh.html" rel="alternate"></link><published>2008-12-22T13:48:00+01:00</published><author><name>admin</name></author><id>tag:www.bertera.it,2008-12-22:vpn-layer-3-con-openssh.html</id><summary type="html">&lt;p&gt;Dalla versione 4.3 di OpenSSH è stato introdotto il supporto per
TUN/TAP. Questo sigifica che è possibile stabilire un tunnel cifrato tra
due peer o due (o piu) reti.&lt;br /&gt;
&lt;a href="http://www.bertera.it/software/ssh-vpn/ssh-vpn.sh"&gt;Questo&lt;/a&gt; script si
occupa di fare il discover dei device tun da utilizzare, assegnare gli
indirizzi e le rotte al tunnel (locali e sul peer remoto) ed eseguire
comandi aggiuntivi tramite un file di configurazione.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.bertera.it/software/ssh-vpn/testvpn.conf"&gt;testvpn.conf&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;SSH_OPTS=&amp;quot;-i /home/pietro/.ssh/id_dsa&amp;quot; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; optional: options for ssh command&lt;/span&gt;
&lt;span class="x"&gt;RUSER=root  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; user to login on remote peer&lt;/span&gt;
&lt;span class="x"&gt;PEER=172.42.10.2 &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; ip of remote peer&lt;/span&gt;
&lt;span class="x"&gt;RTUNADDR=10.10.100.2 &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; remote ip of tunnel&lt;/span&gt;
&lt;span class="x"&gt;LTUNADDR=10.10.100.1 &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; local ip of tunnel&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;LOCAL_TUN&lt;/span&gt;&lt;span class="x"&gt;=tun0 &lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;optional&lt;/span&gt;&lt;span class="x"&gt;: static definition of local tun device&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;REMOTE_TUN&lt;/span&gt;&lt;span class="x"&gt;=tun1 &lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;optional&lt;/span&gt;&lt;span class="x"&gt;: static definition of remote tun device&lt;/span&gt;
&lt;span class="x"&gt;REMOTE_NET=172.16.40.1 &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; remote network&lt;/span&gt;
&lt;span class="x"&gt;ENABLE_PEER_IP_FORWARD=true &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; enable ip forwarding on remote host&lt;/span&gt;
&lt;span class="x"&gt;TRY_LOAD_PEER_TUN_MOD=true &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; try loading tun/tap kernel module&lt;/span&gt;
&lt;span class="x"&gt;BAILOUT_COMMAND=&amp;quot;logger died&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; in POST_TUN_PEER_COMMAND and POST_TUN_LOCAL_COMMAND use &amp;#39; instead &amp;quot; !!!&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LOCAL_TUN&lt;/span&gt;&lt;span class="x"&gt; is local tun device&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;REMOTE_TUN&lt;/span&gt;&lt;span class="x"&gt; is remote tun device&lt;/span&gt;
&lt;span class="x"&gt;POST_TUN_PEER_COMMAND=&amp;#39;iptables -I FORWARD -i &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;REMOTE_TUN&lt;/span&gt;&lt;span class="x"&gt; -j ACCEPT&amp;#39; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; optional: command to execute on remote peer&lt;/span&gt;
&lt;span class="x"&gt;POST_TUN_LOCAL_COMMAND=&amp;#39;ip route add 192.168.6.0/24 via &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;RTUNADDR&lt;/span&gt;&lt;span class="x"&gt; dev &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LOCAL_TUN&lt;/span&gt;&lt;span class="x"&gt;&amp;#39; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; optional: command to execute on local peer&lt;/span&gt;
&lt;span class="x"&gt;LOCAL_IP=&amp;quot;ip&amp;quot; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; optional: local ip command binary&lt;/span&gt;
&lt;span class="x"&gt;REMOTE_IP=&amp;quot;ip&amp;quot; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; optional: remote ip command binary&lt;/span&gt;
&lt;span class="x"&gt;SSH=&amp;quot;ssh&amp;quot; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; optional: ssh binary&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="bash"></category><category term="ssh"></category><category term="vpn"></category></entry></feed>